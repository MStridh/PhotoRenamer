import re
import sys
import getopt

import zipfile
import gzip

from typing import Callable
from io import BytesIO
from pathlib import Path
from progress.bar import Bar


FILE_NAME_FORMAT = "db01.db3_{}.db3"


def process_eventinc_file(input_file:Path, base_path:Path, progress_callback:Callable=None):

    output_path = base_path / "Project" / "SJ_X2U"
    status_path = base_path / "Status" / "EventInc"
    if not status_path.exists():
        status_path.mkdir(parents=True)

    success_file = status_path / f"{input_file.name}.success"
    if success_file.exists():
        print(f"File {input_file.name} already processed, skipping")
        return

    # Open the ZIP to extract
    with zipfile.ZipFile(input_file) as zip_file:

    
        with Bar(f'Processing {input_file.name}', max=len(zip_file.namelist()), suffix='%(percent).1f%% in %(elapsed)ds') as progress:

            # Start extracting the files in zip
            for file_to_extract in zip_file.namelist():

                # Update the progressbar
                progress.next()

                if progress_callback != None:
                    progress_callback(input_file.name, progress.index / progress.max)

                veh_search = re.search(r'EventInc_\d{7}(\d{4})-.*', file_to_extract, re.IGNORECASE)

                # If its not a valid file, then skip and try next file
                if not veh_search:
                    # TODO: Log error found -> There should only be EventInc files in the ZIP file.
                    continue

                # Get vehicle name
                vehicle = veh_search.group(1)

                veh_output_path = output_path / vehicle
                # Create destination folder if it doesn't exists
                if not veh_output_path.exists():
                    veh_output_path.mkdir()


                try:
                    # We have a zip within a zip
                    eventinc_file_data = BytesIO(zip_file.read(file_to_extract))
                except zipfile.BadZipFile:
                    # TODO: Log the error
                    continue
                except OSError:
                    # TODO: Log the error 
                    # Some issue with the file or network, try again next time.
                    return


                try:
                    eventinc_file = zipfile.ZipFile(eventinc_file_data)
                except zipfile.BadZipFile:
                    # TODO: Log the error
                    continue

                # Extract file from archive
                with eventinc_file :
                    for db_file_name in eventinc_file.namelist():

                        date_search = re.search(r'^exportdb01.db3_(\d{6}_\d{6})-\d{6}_\d{6}\.db3\.gz$', db_file_name, re.IGNORECASE)

                        # If its not a valid DB file, the skip and try next file
                        if not date_search:
                            # TODO: handle this issue, there should be a DB file with this name in here.
                            continue

                        # Get the date of the DB file
                        db_date_time = date_search.group(1)


                        try:
                            # Read the data of the DB file (in the zip file)
                            gz_data = BytesIO(eventinc_file.read(db_file_name))
                        except zipfile.BadZipFile:
                            # TODO: Log the error found
                            continue
                        
                        # Read the content from the DB
                        with gzip.open(gz_data) as gz_file:
                            db_file_content = gz_file.read()

                        # Write DB file to disk
                        db_output_file = veh_output_path / FILE_NAME_FORMAT.format(db_date_time)
                        db_output_file.write_bytes(db_file_content)

        # Create the done file
        success_file.touch()


def process_eventinc_dir(input_dir, output_dir):
    for input_file in input_dir.iterdir():

        # Check that input file exists
        if not input_file.is_file():
            print(f"Can not find {input_file.name}")
            continue

        veh_search = re.search(r'^EventInc_\d{4}-\d{2}-\d{2}\.uat.zip$', input_file.name, re.IGNORECASE)
        if not veh_search:
            #print("\nWrong format on file name: {}\n".format(input_file))
            #sys.exit()
            continue


        process_eventinc_file(input_file, output_dir)


if __name__ == "__main__":
    def print_help(app_name):
        print("usage: {} [options]".format(app_name))
        print("Options:")
        print("-i        : input path")
        print("-o        : output path")
        print("-h        : help")

    try:
        opts, args = getopt.getopt(sys.argv[1:], "hi:vo:")
    except getopt.GetoptError as err:
        print("Incorrect options")  
        print("{}\n".format(err)) # will print something like "option -a not recognized"

        # print help information and exit:
        print_help(sys.argv[0])
        sys.exit(2)


    input_path = Path()
    output_path = Path()
    decimals:int = 0

    for option, value in opts:
        if option == "-i":
            input_path = Path(value)
        elif option == "-o":
            output_path = Path(value)
        elif option == "-h":
            print_help(sys.argv[0])
            sys.exit(2)
        elif option == "-d":
            decimals = int(value)
        else:
            print("Unhandled options")
            print_help(sys.argv[0])
            sys.exit(2)


    process_eventinc_dir(input_path, output_path)
